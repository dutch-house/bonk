/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuctionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "distributeTokens"
      | "getAuctionEnded"
      | "getClearingPrice"
      | "getCommitmentByBidder"
      | "getCreator"
      | "getCurrentPrice"
      | "getDuration"
      | "getRemainingSupply"
      | "getReservedPrice"
      | "getStartPrice"
      | "getStartTime"
      | "getToken"
      | "getTokensDistributed"
      | "getTotalCommitment"
      | "getTotalSupply"
      | "placeBid"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DebugRefund" | "RefundFailed" | "TransferFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "distributeTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitmentByBidder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokensDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "distributeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentByBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DebugRefundEvent {
  export type InputTuple = [
    tokensPurchased: BigNumberish,
    cost: BigNumberish,
    refund: BigNumberish
  ];
  export type OutputTuple = [
    tokensPurchased: bigint,
    cost: bigint,
    refund: bigint
  ];
  export interface OutputObject {
    tokensPurchased: bigint;
    cost: bigint;
    refund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundFailedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferFailedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuctionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionMarket;
  waitForDeployment(): Promise<this>;

  interface: AuctionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  distributeTokens: TypedContractMethod<[], [void], "nonpayable">;

  getAuctionEnded: TypedContractMethod<[], [boolean], "view">;

  getClearingPrice: TypedContractMethod<[], [bigint], "view">;

  getCommitmentByBidder: TypedContractMethod<
    [bidder: AddressLike],
    [bigint],
    "view"
  >;

  getCreator: TypedContractMethod<[], [string], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getDuration: TypedContractMethod<[], [bigint], "view">;

  getRemainingSupply: TypedContractMethod<[], [bigint], "view">;

  getReservedPrice: TypedContractMethod<[], [bigint], "view">;

  getStartPrice: TypedContractMethod<[], [bigint], "view">;

  getStartTime: TypedContractMethod<[], [bigint], "view">;

  getToken: TypedContractMethod<[], [string], "view">;

  getTokensDistributed: TypedContractMethod<[], [boolean], "view">;

  getTotalCommitment: TypedContractMethod<[], [bigint], "view">;

  getTotalSupply: TypedContractMethod<[], [bigint], "view">;

  placeBid: TypedContractMethod<[], [void], "payable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "distributeTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuctionEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getClearingPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCommitmentByBidder"
  ): TypedContractMethod<[bidder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReservedPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStartPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokensDistributed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getTotalCommitment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DebugRefund"
  ): TypedContractEvent<
    DebugRefundEvent.InputTuple,
    DebugRefundEvent.OutputTuple,
    DebugRefundEvent.OutputObject
  >;
  getEvent(
    key: "RefundFailed"
  ): TypedContractEvent<
    RefundFailedEvent.InputTuple,
    RefundFailedEvent.OutputTuple,
    RefundFailedEvent.OutputObject
  >;
  getEvent(
    key: "TransferFailed"
  ): TypedContractEvent<
    TransferFailedEvent.InputTuple,
    TransferFailedEvent.OutputTuple,
    TransferFailedEvent.OutputObject
  >;

  filters: {
    "DebugRefund(uint256,uint256,uint256)": TypedContractEvent<
      DebugRefundEvent.InputTuple,
      DebugRefundEvent.OutputTuple,
      DebugRefundEvent.OutputObject
    >;
    DebugRefund: TypedContractEvent<
      DebugRefundEvent.InputTuple,
      DebugRefundEvent.OutputTuple,
      DebugRefundEvent.OutputObject
    >;

    "RefundFailed(address,uint256)": TypedContractEvent<
      RefundFailedEvent.InputTuple,
      RefundFailedEvent.OutputTuple,
      RefundFailedEvent.OutputObject
    >;
    RefundFailed: TypedContractEvent<
      RefundFailedEvent.InputTuple,
      RefundFailedEvent.OutputTuple,
      RefundFailedEvent.OutputObject
    >;

    "TransferFailed(address,uint256)": TypedContractEvent<
      TransferFailedEvent.InputTuple,
      TransferFailedEvent.OutputTuple,
      TransferFailedEvent.OutputObject
    >;
    TransferFailed: TypedContractEvent<
      TransferFailedEvent.InputTuple,
      TransferFailedEvent.OutputTuple,
      TransferFailedEvent.OutputObject
    >;
  };
}
